import UIKit

DispatchQueue.main.async {
    print("1")
    DispatchQueue.global().async {
        DispatchQueue.main.sync {
            print("2")
        }
        print("3")
    }
    print("4")

    DispatchQueue.global(qos: .utility).sync {
        DispatchQueue.main.async {
            print("5")
        }
        print("6")
    }
    print("7")
}

/*
 Задача с очередями.

 1_4_6_7_2_5_3
 1_4_6_7_5_2_3

 1. main.async - на главном потоке ставятся асинхронно задачи. Первая из них - вывести 1

 2. далее на основном потоке поставится асинхронно задача по созданию параллельной (global().async) очереди с приоритетом по умолчанию. Так как задача поставлена асинхронно, основной поток пойдет дальше и выведется 4

 3. после этого на основном потоке поставится задача на создание еще одной параллельной очереди (global(qos: .utility).sync) с низким приоритетом и синхронным выполнением.
 Это синхронная задача/очередь и задачи внутри этой очереди ставятся/выполняются последовательно. Поэтому основной поток остановится и будет ждать их выполнения на параллельных потоках.
 qos .utility этой очереди не повлияет на постановку задач внутри самой этой очереди. Это означает что до самой постановки задач дойдет время не сразу, а пока выполнятся более приоритетные задачи на глобальном потоке. Тем временем, главный поток будет ждать все это время.

 Внутри этой параллельной очереди с синхронным выполнением задач первой поставится асинхронная задача по созданию асинхронной очереди на главном потоке, в которой должна выводится пятерка.

 Так как выполнение задач синхронное, после этого выведется 6.

 4. После выполнения синхронной задачи на параллельных потоках, основной поток перестанет ждать, пойдет дальше и выведет 7.

 5. Далее время подойдет к тому, что уже создастся первая параллельная очередь и она начнет выполняться на параллельных потоках.
 Так как постановка задач происходит из параллельных потоков главному потоку, то main.sync не приведет к DeadLock, а выполнится синхронно на главном потоке и выведется 2

 6. К этому времени должна создаться асинхронная задача/очередь по выводу пятерки на главном потоке. После синхронного вывода 2 на главном потоке придет очередь для вывода 5.

 Но эта задача по выводу пятерки может создаться раньше чем первая глобальная очередь и тогда пятерка выведется раньше двойки.

 7. После выполнения синхронной задачи main.sync и вывода пятерки выполнится вывод 3.

 */
